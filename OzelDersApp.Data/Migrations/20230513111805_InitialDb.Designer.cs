// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OzelDersApp.Data.Concrete.EfCore.Context;

#nullable disable

namespace OzelDersApp.Data.Migrations
{
    [DbContext(typeof(OzelDersContext))]
    [Migration("20230513111805_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dfdf0094-ff05-40fc-93a7-14ebafa45b71",
                            RoleId = "3f3a8f53-9519-4e51-a74f-1acbc4b9aaba"
                        },
                        new
                        {
                            UserId = "e53ecfa0-6ce4-40c3-83d1-e8f8d870cca9",
                            RoleId = "d01c1e95-3167-4703-bce1-76ce1aedc54e"
                        },
                        new
                        {
                            UserId = "88b5cedc-987b-4d70-9a91-2d5ace96e249",
                            RoleId = "d01c1e95-3167-4703-bce1-76ce1aedc54e"
                        },
                        new
                        {
                            UserId = "c81ec6bd-40c5-4793-a26a-5d6c1500e040",
                            RoleId = "d01c1e95-3167-4703-bce1-76ce1aedc54e"
                        },
                        new
                        {
                            UserId = "c14211c3-e49f-4aed-997d-63bd57724a4c",
                            RoleId = "d01c1e95-3167-4703-bce1-76ce1aedc54e"
                        },
                        new
                        {
                            UserId = "f09e13c3-7fe8-4f7e-80fc-4508d339ead3",
                            RoleId = "d01c1e95-3167-4703-bce1-76ce1aedc54e"
                        },
                        new
                        {
                            UserId = "97ffab8c-7236-4d83-be5b-69a14612f8f1",
                            RoleId = "d01c1e95-3167-4703-bce1-76ce1aedc54e"
                        },
                        new
                        {
                            UserId = "800dd63e-ac56-4f5c-b017-c203690bcd5f",
                            RoleId = "d01c1e95-3167-4703-bce1-76ce1aedc54e"
                        },
                        new
                        {
                            UserId = "92f692bf-ec2d-45b6-9b3e-39ae6e78459d",
                            RoleId = "d01c1e95-3167-4703-bce1-76ce1aedc54e"
                        },
                        new
                        {
                            UserId = "cfdd6240-1389-4c81-96f2-3115d1ac7037",
                            RoleId = "d01c1e95-3167-4703-bce1-76ce1aedc54e"
                        },
                        new
                        {
                            UserId = "9d9098db-63c1-4ea7-a114-2794baebdf8a",
                            RoleId = "d01c1e95-3167-4703-bce1-76ce1aedc54e"
                        },
                        new
                        {
                            UserId = "3ebdf0fa-5410-48bf-95f4-5facb9df4c36",
                            RoleId = "665c2083-629a-434b-9fb0-353ec2ee9bb7"
                        },
                        new
                        {
                            UserId = "d6e4f8c2-ab85-4472-8a57-b7d3971843c1",
                            RoleId = "665c2083-629a-434b-9fb0-353ec2ee9bb7"
                        },
                        new
                        {
                            UserId = "d575880b-02de-4e8f-a4bd-cd1c85ad125b",
                            RoleId = "665c2083-629a-434b-9fb0-353ec2ee9bb7"
                        },
                        new
                        {
                            UserId = "d7571beb-5cb5-45bf-abc2-e9b76ad1cd19",
                            RoleId = "665c2083-629a-434b-9fb0-353ec2ee9bb7"
                        },
                        new
                        {
                            UserId = "70ddfee1-6dd5-431b-a021-f9886c3d56bd",
                            RoleId = "665c2083-629a-434b-9fb0-353ec2ee9bb7"
                        },
                        new
                        {
                            UserId = "480c320e-dfd0-410b-928c-e554b6ce2d92",
                            RoleId = "665c2083-629a-434b-9fb0-353ec2ee9bb7"
                        },
                        new
                        {
                            UserId = "6231d6f0-eb32-49f6-ad34-5f75af075161",
                            RoleId = "665c2083-629a-434b-9fb0-353ec2ee9bb7"
                        },
                        new
                        {
                            UserId = "db54aaaa-16c7-4145-9640-099bc7b1838b",
                            RoleId = "665c2083-629a-434b-9fb0-353ec2ee9bb7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Adverts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 4,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 669, DateTimeKind.Local).AddTicks(9912),
                            Description = "dsdasd",
                            IsApproved = true,
                            Price = 45m,
                            TeacherId = 4,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 669, DateTimeKind.Local).AddTicks(9919),
                            Url = "dsdds"
                        });
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matematik",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3555),
                            Description = "Matematik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3558),
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Fizik",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3560),
                            Description = "Fizik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3561),
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3562),
                            Description = "Kimya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3563),
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Biyoloji",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3564),
                            Description = "Biyoloji Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3564),
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Tarih",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3565),
                            Description = "Tarih Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3566),
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Coğrafya",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3567),
                            Description = "Coğrafya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3567),
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 7,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3568),
                            Description = "İngilizce Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3569),
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 8,
                            BranchName = "Almanca",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3570),
                            Description = "Almanca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3570),
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 9,
                            BranchName = "Fransızca",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3571),
                            Description = "Fransızca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3572),
                            Url = "fransizca"
                        },
                        new
                        {
                            Id = 10,
                            BranchName = "Felsefe",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3573),
                            Description = "Felsefe Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3573),
                            Url = "felsefe"
                        },
                        new
                        {
                            Id = 11,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3575),
                            Description = "Müzik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3575),
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 12,
                            BranchName = "Resim",
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3576),
                            Description = "Resim Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(3577),
                            Url = "resim"
                        });
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "dfdf0094-ff05-40fc-93a7-14ebafa45b71"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "e53ecfa0-6ce4-40c3-83d1-e8f8d870cca9"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "88b5cedc-987b-4d70-9a91-2d5ace96e249"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "c81ec6bd-40c5-4793-a26a-5d6c1500e040"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "c14211c3-e49f-4aed-997d-63bd57724a4c"
                        },
                        new
                        {
                            Id = 6,
                            UserId = "f09e13c3-7fe8-4f7e-80fc-4508d339ead3"
                        },
                        new
                        {
                            Id = 7,
                            UserId = "97ffab8c-7236-4d83-be5b-69a14612f8f1"
                        },
                        new
                        {
                            Id = 8,
                            UserId = "800dd63e-ac56-4f5c-b017-c203690bcd5f"
                        },
                        new
                        {
                            Id = 9,
                            UserId = "92f692bf-ec2d-45b6-9b3e-39ae6e78459d"
                        },
                        new
                        {
                            Id = 10,
                            UserId = "cfdd6240-1389-4c81-96f2-3115d1ac7037"
                        },
                        new
                        {
                            Id = 11,
                            UserId = "9d9098db-63c1-4ea7-a114-2794baebdf8a"
                        },
                        new
                        {
                            Id = 12,
                            UserId = "3ebdf0fa-5410-48bf-95f4-5facb9df4c36"
                        },
                        new
                        {
                            Id = 13,
                            UserId = "d6e4f8c2-ab85-4472-8a57-b7d3971843c1"
                        },
                        new
                        {
                            Id = 14,
                            UserId = "d575880b-02de-4e8f-a4bd-cd1c85ad125b"
                        },
                        new
                        {
                            Id = 15,
                            UserId = "d7571beb-5cb5-45bf-abc2-e9b76ad1cd19"
                        },
                        new
                        {
                            Id = 16,
                            UserId = "70ddfee1-6dd5-431b-a021-f9886c3d56bd"
                        },
                        new
                        {
                            Id = 17,
                            UserId = "480c320e-dfd0-410b-928c-e554b6ce2d92"
                        },
                        new
                        {
                            Id = 18,
                            UserId = "6231d6f0-eb32-49f6-ad34-5f75af075161"
                        },
                        new
                        {
                            Id = 19,
                            UserId = "db54aaaa-16c7-4145-9640-099bc7b1838b"
                        });
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3f3a8f53-9519-4e51-a74f-1acbc4b9aaba",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "665c2083-629a-434b-9fb0-353ec2ee9bb7",
                            Description = "Öğretmenler",
                            Name = "Ogretmen",
                            NormalizedName = "OGRETMEN"
                        },
                        new
                        {
                            Id = "d01c1e95-3167-4703-bce1-76ce1aedc54e",
                            Description = "Öğrenciler",
                            Name = "Ogrenci",
                            NormalizedName = "OGRENCI"
                        });
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dfdf0094-ff05-40fc-93a7-14ebafa45b71",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "e060e527-bae0-4b60-8487-5b83f2da054f",
                            DateOfBirth = new DateTime(2000, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cananelif@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Canan",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Elif",
                            LockoutEnabled = false,
                            NormalizedEmail = "CANANELIF@HOTMAIL.COM",
                            NormalizedUserName = "CANANELIF",
                            PasswordHash = "AQAAAAIAAYagAAAAEHOjX1jmAHS5euLbG0AqHMpABaeuTag8ZuRhWn2W22ncjultvC59bDSOxLArXEHYfw==",
                            Phone = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "faf03eaa-7e60-48fa-9eeb-955bfab67101",
                            TwoFactorEnabled = false,
                            UserName = "cananelif"
                        },
                        new
                        {
                            Id = "e53ecfa0-6ce4-40c3-83d1-e8f8d870cca9",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "83de87dd-b3ae-4425-9a39-04bc7b2f447a",
                            DateOfBirth = new DateTime(2007, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "denizcakir@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Çakır",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZCAKIR@HOTMAIL.COM",
                            NormalizedUserName = "DENIZCAKIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEHbl76LLz4lJUTn3fPmiVlvQvija/sv+DhaDLXeyT0uEXBz68oWLddwK/cS3KJv/bw==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f3fc63c-a925-42e0-93cf-8cb487b76a81",
                            TwoFactorEnabled = false,
                            UserName = "denizcakir"
                        },
                        new
                        {
                            Id = "88b5cedc-987b-4d70-9a91-2d5ace96e249",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "bcdefaf4-e52c-4c39-a0b6-3b53559d39e5",
                            DateOfBirth = new DateTime(2002, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmetyilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETYILMAZ@GMAİL.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELeTcgHx47McdzFB1+3JbD7pEaJA19xIennSLVVXSKblQN+Kv3aylWCFqx9oFEXgmQ==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23a0b104-ba82-4f8c-b312-dd0181b0037e",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = "c81ec6bd-40c5-4793-a26a-5d6c1500e040",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "dffed302-bbb4-458e-b7f4-08b9d1c4f232",
                            DateOfBirth = new DateTime(2001, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.demir@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.DEMIR@YAHOO.COM",
                            NormalizedUserName = "AYSEDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEHRvSe+ZpTMR8BTHGmAfaq6YkpZpqrLW1jzq2nD9Lt8XnhclbcFM4zWrw8kZVIh+3g==",
                            Phone = "5329876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c28434f-ddb3-451c-ba1f-49060fbb99a9",
                            TwoFactorEnabled = false,
                            UserName = "aysedemir"
                        },
                        new
                        {
                            Id = "c14211c3-e49f-4aed-997d-63bd57724a4c",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "00b49cb2-3729-4ba9-a563-8ee48a141378",
                            DateOfBirth = new DateTime(2009, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmetkaya@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETKAYA@HOTMAIL.COM",
                            NormalizedUserName = "MEHMETKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEHvWpXBbbUxynGFPDonMYVhgusbJhiaFCScxkEwiFXyZ8vufs5sKzWFMlxc6rdY3pw==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66eff621-4161-41e0-a6b0-728f163e3392",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = "f09e13c3-7fe8-4f7e-80fc-4508d339ead3",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "3f28a004-4799-4e2c-bcdb-eb3f3f2485f3",
                            DateOfBirth = new DateTime(2003, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatmasahin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMASAHIN@GMAIL.COM",
                            NormalizedUserName = "FATMASAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPC75O96VDR6k2VDh6MQr4Y86T8Qn0YxErWu91Yh/krmL0R2jpI/Hk/pWz7ds0KwKg==",
                            Phone = "5334567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "758d34da-ea60-447a-a158-7610a62c1680",
                            TwoFactorEnabled = false,
                            UserName = "fatmasahin"
                        },
                        new
                        {
                            Id = "97ffab8c-7236-4d83-be5b-69a14612f8f1",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "25edf7fe-4d91-472c-8c2a-0f5e0e1cbe3d",
                            DateOfBirth = new DateTime(2008, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emreakin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Akın",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMREAKIN@HOTMAIL.COM",
                            NormalizedUserName = "EMREAKIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELJyRWU19NSXe24/ryDwv1G1DiPlxfLaijDGg6Pxk3QwGjk14+tN+wFX6OjxwX5g6Q==",
                            Phone = "5379876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14536149-b845-4d19-aa9c-99caac131e42",
                            TwoFactorEnabled = false,
                            UserName = "emreakin"
                        },
                        new
                        {
                            Id = "800dd63e-ac56-4f5c-b017-c203690bcd5f",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "95e91875-3a9c-4407-8cd8-e96399d123d7",
                            DateOfBirth = new DateTime(2005, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynepturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Türk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEPTURK@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEFdqHBP7wlWkrV4K+vswxo43LO7Y/671VVomzpicsGBpX5raSFAFCNQWcORbe+PZKQ==",
                            Phone = "5336549872",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2e27a48-a11d-4c90-996c-4c35ed1cd6e1",
                            TwoFactorEnabled = false,
                            UserName = "zeynepturk"
                        },
                        new
                        {
                            Id = "92f692bf-ec2d-45b6-9b3e-39ae6e78459d",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "6eaaa98b-2f3f-4762-8b53-01156a12a065",
                            DateOfBirth = new DateTime(2007, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEA7rNuDsXeFpzhlalnoUxnMteObTts1I1kSU2t0mqArOXBl04x/daCAGfFraLf4CdA==",
                            Phone = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1cb98fe-e01d-41b7-8ea2-9d497c77afc3",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz"
                        },
                        new
                        {
                            Id = "cfdd6240-1389-4c81-96f2-3115d1ac7037",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "2c1437c6-71c4-450a-971d-c418a7e7d0b1",
                            DateOfBirth = new DateTime(2009, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mustafaozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mustafa",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUSTAFAOZKAN@GMAIL.COM",
                            NormalizedUserName = "MUSTAFAOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAECMaILqUpAriEYqHQXhhqemEBxL+3FOI3u/ZUL/RfB1fwy/YzmPh7+w3TB3ZEsvS3Q==",
                            Phone = "5423456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04652964-3750-46d2-b1e7-861991295f14",
                            TwoFactorEnabled = false,
                            UserName = "mustafaozkan"
                        },
                        new
                        {
                            Id = "9d9098db-63c1-4ea7-a114-2794baebdf8a",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "1be241f0-d4a3-425e-a0c7-0aacc1607b26",
                            DateOfBirth = new DateTime(2008, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRAAYDIN@HOTMAIL.COM",
                            NormalizedUserName = "ESRAAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDmtlgtWKqmKmJUpBeoKfZqHB6nkFEWNprSXNZ7ECLEZAKTa7w6xPe6fOd+PhH7onw==",
                            Phone = "5397891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a779357-9218-4894-b46a-a04f20f23f16",
                            TwoFactorEnabled = false,
                            UserName = "esraaydin"
                        },
                        new
                        {
                            Id = "3ebdf0fa-5410-48bf-95f4-5facb9df4c36",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "de8d5530-8557-4001-94b4-7d78b42116c8",
                            DateOfBirth = new DateTime(1980, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selinkar@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            ImageId = 1,
                            LastName = "Kar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELINKAR@HOTMAIL.COM",
                            NormalizedUserName = "SELINKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEKSvCK0Yu32ckkpQMMeSsKPtn33SVbt92kkBwMpfJFZbT9NV3UNA1zj0n4WrRnPm5w==",
                            Phone = "5399782513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85996f0d-bbd5-4ddb-82b1-58708728bec6",
                            TwoFactorEnabled = false,
                            UserName = "selinkar"
                        },
                        new
                        {
                            Id = "d6e4f8c2-ab85-4472-8a57-b7d3971843c1",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "3b53f1ba-1785-40bc-9f80-3f7a51eab689",
                            DateOfBirth = new DateTime(1990, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cem.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cem",
                            Gender = "Erkek",
                            ImageId = 2,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEM.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "CEMYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEKhKndR6Em+LGhX9Jnq3NhuG+fLDnyvbXRfa/YY8gSWJzLN0TMsgdb6FuZLOx01AtA==",
                            Phone = "5323456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96531f73-39bd-4ea5-84d8-ef95fcbc1819",
                            TwoFactorEnabled = false,
                            UserName = "cemyilmaz"
                        },
                        new
                        {
                            Id = "d575880b-02de-4e8f-a4bd-cd1c85ad125b",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "8af9071e-7700-46ce-823b-9cf09c564d9c",
                            DateOfBirth = new DateTime(1992, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şevval",
                            Gender = "Kadın",
                            ImageId = 3,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "sevval.demir@hotmail.com",
                            NormalizedUserName = "SEVVALDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAENMC8CkUN2YSaFWwuLtYVkDZv8JnVYccRz5h/idrW//wbg0/S0s9+3Hxf2779BZzUA==",
                            Phone = "5387891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fae58f88-8d8c-4d8d-aad9-83ed4cf9e0d1",
                            TwoFactorEnabled = false,
                            UserName = "sevvaldemir"
                        },
                        new
                        {
                            Id = "d7571beb-5cb5-45bf-abc2-e9b76ad1cd19",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "d5f98b8c-c4c5-49a9-babb-42cfc95aad8d",
                            DateOfBirth = new DateTime(1994, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 4,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEPNr0RD4YElHivZyYe08wt3fI2rQuWmjVbzd9iAWbtWSzl0Tmaw7HdXvg9VpVmxwoQ==",
                            Phone = "5336549876",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5481e7d0-3624-4170-b616-0e704ef7230a",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildiz"
                        },
                        new
                        {
                            Id = "70ddfee1-6dd5-431b-a021-f9886c3d56bd",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "f190027e-020e-453e-9162-939de01ab44d",
                            DateOfBirth = new DateTime(1980, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gul.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gül",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUL.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "GULSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENCaLqLeEdDnIxznJ+tEBpd0ce+fLcBHBxNmTfG01UkIJ9kDVu7NVz//cCC1PEK4yg==",
                            Phone = "5361234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "130dc004-02e2-4d1c-8127-586e2ba6d9af",
                            TwoFactorEnabled = false,
                            UserName = "gulsahin"
                        },
                        new
                        {
                            Id = "480c320e-dfd0-410b-928c-e554b6ce2d92",
                            AccessFailedCount = 0,
                            City = "Kayseri",
                            ConcurrencyStamp = "dde1cc18-e7e6-404f-a947-1f6dedfd7b11",
                            DateOfBirth = new DateTime(1987, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kemal.kaya@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMAL.KAYA@GMAIL.COM",
                            NormalizedUserName = "KEMALKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ/U7DdnViz1iO4o+2CIQKQFUSt5Ih4xZ5Ps11p9tVJ/rQpi2cHkuXrd0zUVqieEjw==",
                            Phone = "5359876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a9ad9df-fb72-4a16-b75a-1a73e822a50a",
                            TwoFactorEnabled = false,
                            UserName = "kemalkaya"
                        },
                        new
                        {
                            Id = "6231d6f0-eb32-49f6-ad34-5f75af075161",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "bf0b1944-414a-4da3-9a3a-f29c3626d69d",
                            DateOfBirth = new DateTime(1990, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gokhan.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gökhan",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKHAN.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GOKHANAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDfgh1G2O3pjhonqNSzVIi1xjWgyiuhlmA7sD3UcFAUJjd5atjmTRZe2nMeQXE7GZg==",
                            Phone = "5321234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c4648cb-76f0-4cf8-b4f2-0573f28b8d03",
                            TwoFactorEnabled = false,
                            UserName = "gokhanaydin"
                        },
                        new
                        {
                            Id = "db54aaaa-16c7-4145-9640-099bc7b1838b",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "eaf554ef-0bd8-4244-aec1-a21b44a080e1",
                            DateOfBirth = new DateTime(1992, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seyma.yilmaz@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şeyma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEYMA.YILMAZ@HOTMAIL.COM",
                            NormalizedUserName = "SEYMAYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEPExz6lCrZJQAmQOmBz7z9njztbQbJ+g6Iga6N2TgsERwsl/J9QN19yj1LU2gzJ5+w==",
                            Phone = "5399876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "614b8d2e-3201-406b-9e15-8156fb93fa38",
                            TwoFactorEnabled = false,
                            UserName = "seymayilmaz"
                        });
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(9234),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(9236),
                            Url = "teacher-1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(9237),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(9238),
                            Url = "teacher-2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(9239),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(9239),
                            Url = "teacher-3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(9240),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(9240),
                            Url = "teacher-4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(9241),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 5, 671, DateTimeKind.Local).AddTicks(9242),
                            Url = "resimyok.jpg"
                        });
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9151),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9163),
                            UserId = "e53ecfa0-6ce4-40c3-83d1-e8f8d870cca9"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9172),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9173),
                            UserId = "88b5cedc-987b-4d70-9a91-2d5ace96e249"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9174),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9175),
                            UserId = "c81ec6bd-40c5-4793-a26a-5d6c1500e040"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9176),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9177),
                            UserId = "c14211c3-e49f-4aed-997d-63bd57724a4c"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9178),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9178),
                            UserId = "f09e13c3-7fe8-4f7e-80fc-4508d339ead3"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9180),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9181),
                            UserId = "97ffab8c-7236-4d83-be5b-69a14612f8f1"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9182),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9183),
                            UserId = "800dd63e-ac56-4f5c-b017-c203690bcd5f"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9184),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9184),
                            UserId = "92f692bf-ec2d-45b6-9b3e-39ae6e78459d"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9186),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9187),
                            UserId = "cfdd6240-1389-4c81-96f2-3115d1ac7037"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9189),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9189),
                            UserId = "9d9098db-63c1-4ea7-a114-2794baebdf8a"
                        });
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Graduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9228),
                            Graduation = "Çanakkale Onsekiz Mart Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9229),
                            UserId = "3ebdf0fa-5410-48bf-95f4-5facb9df4c36"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9236),
                            Graduation = "Orta Doğu Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9237),
                            UserId = "d6e4f8c2-ab85-4472-8a57-b7d3971843c1"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9238),
                            Graduation = "İstanbul Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9239),
                            UserId = "d575880b-02de-4e8f-a4bd-cd1c85ad125b"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9241),
                            Graduation = "Ege Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9241),
                            UserId = "d7571beb-5cb5-45bf-abc2-e9b76ad1cd19"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9242),
                            Graduation = "Akdeniz Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9243),
                            UserId = "70ddfee1-6dd5-431b-a021-f9886c3d56bd"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9245),
                            Graduation = "Erciyes Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9245),
                            UserId = "480c320e-dfd0-410b-928c-e554b6ce2d92"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9246),
                            Graduation = "Çukurova Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9247),
                            UserId = "6231d6f0-eb32-49f6-ad34-5f75af075161"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9248),
                            Graduation = "Uludağ Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 14, 18, 4, 411, DateTimeKind.Local).AddTicks(9249),
                            UserId = "db54aaaa-16c7-4145-9640-099bc7b1838b"
                        });
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeachersBranches");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            BranchId = 4
                        },
                        new
                        {
                            TeacherId = 5,
                            BranchId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            BranchId = 6
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 9
                        },
                        new
                        {
                            TeacherId = 8,
                            BranchId = 10
                        });
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Advert", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Branch", "Branch")
                        .WithMany("Adverts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("Adverts")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Identity.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OzelDersApp.Entity.Concrete.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersApp.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Identity.User", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Order", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersApp.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Student", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("OzelDersApp.Entity.Concrete.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("OzelDersApp.Entity.Concrete.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("OzelDersApp.Entity.Concrete.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Branch", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Student", b =>
                {
                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("OzelDersApp.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
